-- 1. List all unique cities where customers are located
SELECT DISTINCT customer_city 
FROM customers;


-- 2. Count the number of orders placed in 2017
SELECT COUNT(order_id) 
FROM orders 
WHERE YEAR(order_purchase_timestamp) = 2017;


-- 3. Find the total sales per category
SELECT UPPER(products.product_category), 
       ROUND(SUM(payments.payment_value), 2) AS Total_sales
FROM products 
JOIN order_items ON products.product_id = order_items.product_id
JOIN payments ON order_items.order_id = payments.order_id
GROUP BY products.product_category;


-- 4. Calculate the percentage of orders that were paid in installments
SELECT (SUM(CASE WHEN payment_installments > 1 THEN 1 ELSE 0 END) / COUNT(*)) * 100 AS Installments_Percentage 
FROM payments;


-- 5. Count the number of customers from each state
SELECT customer_state, 
       COUNT(customer_id) AS No_of_Customers
FROM customers
GROUP BY customer_state;


-- 6. Calculate the number of orders per month in 2018
SELECT MONTHNAME(order_purchase_timestamp) AS Months, 
       COUNT(order_id) AS Total_Orders
FROM orders 
WHERE YEAR(order_purchase_timestamp) = 2018
GROUP BY Months;


-- 7. Find the average number of products per order, grouped by customer city
WITH count_per_order AS (
    SELECT orders.order_id, 
           orders.customer_id, 
           COUNT(order_items.product_id) AS order_count
    FROM orders 
    JOIN order_items ON orders.order_id = order_items.order_id
    GROUP BY orders.order_id, orders.customer_id
)
SELECT customers.customer_city, 
       ROUND(AVG(count_per_order.order_count), 2) AS Avg_order
FROM customers 
JOIN count_per_order ON customers.customer_id = count_per_order.customer_id
GROUP BY customers.customer_city
ORDER BY Avg_order DESC;


-- 8. Calculate the percentage of total revenue contributed by each product category
SELECT UPPER(products.product_category), 
       ROUND((SUM(payments.payment_value) / (SELECT SUM(payment_value) FROM payments)) * 100, 2) AS Total_Revenue_Percentage
FROM products 
JOIN order_items ON products.product_id = order_items.product_id
JOIN payments ON order_items.order_id = payments.order_id
GROUP BY products.product_category
ORDER BY Total_Revenue_Percentage DESC;


-- 9. Identify the correlation between product price and the number of times a product has been purchased
SELECT UPPER(products.product_category), 
       COUNT(order_items.product_id) AS Product_count, 
       ROUND(AVG(order_items.price), 2) AS Avg_Price
FROM products 
JOIN order_items ON products.product_id = order_items.product_id
GROUP BY products.product_category;


-- 10. Calculate the total revenue generated by each seller, and rank them by revenue
SELECT *,
       DENSE_RANK() OVER (ORDER BY Revenue DESC) AS Rank_
FROM (
    SELECT order_items.seller_id,
           ROUND(SUM(payments.payment_value), 2) AS Revenue
    FROM order_items
    JOIN payments ON order_items.order_id = payments.order_id
    GROUP BY order_items.seller_id
) AS Rk;


-- 11. Calculate the moving average of order values for each customer over their order history
SELECT *, 
       AVG(payment) OVER (
           PARTITION BY customer_id 
           ORDER BY order_purchase_timestamp 
           ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
       ) AS Moving_Average 
FROM (
    SELECT 
        orders.customer_id, 
        orders.order_purchase_timestamp, 
        payments.payment_value AS payment
    FROM 
        orders 
    JOIN 
        payments ON orders.order_id = payments.order_id
) AS cus_history;


-- 12. Calculate the cumulative sales per month for each year
SELECT *, 
       ROUND(SUM(payment) OVER(ORDER BY years, months), 2) AS cumulative_sales
FROM (
    SELECT YEAR(orders.order_purchase_timestamp) AS years, 
           MONTH(orders.order_purchase_timestamp) AS months, 
           ROUND(SUM(payments.payment_value), 2) AS payment
    FROM orders 
    JOIN payments ON orders.order_id = payments.order_id
    GROUP BY years, months 
    ORDER BY years, months
) AS pay_details;


-- 13. Calculate the year-over-year growth rate of total sales
WITH pay_year AS (
    SELECT 
        YEAR(orders.order_purchase_timestamp) AS years, 
        ROUND(SUM(payments.payment_value), 2) AS payment
    FROM 
        orders 
    JOIN 
        payments ON orders.order_id = payments.order_id
    GROUP BY 
        years 
    ORDER BY 
        years
)
SELECT 
    years, 
    ((payment - LAG(payment, 1) OVER(ORDER BY years)) / LAG(payment, 1) OVER(ORDER BY years)) * 100 AS year_growth
FROM 
    pay_year;


/* 14. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase 
within 6 months of their first purchase */
WITH f_date AS (
    SELECT 
        customers.customer_id, 
        MIN(orders.order_purchase_timestamp) AS first_order
    FROM 
        customers 
    JOIN 
        orders ON customers.customer_id = orders.customer_id
    GROUP BY 
        customers.customer_id
),

sec_date AS (
    SELECT 
        f_date.customer_id, 
        COUNT(DISTINCT orders.order_purchase_timestamp) AS order_count
    FROM 
        f_date 
    JOIN 
        orders ON f_date.customer_id = orders.customer_id
    AND 
        orders.order_purchase_timestamp > first_order
    AND 
        orders.order_purchase_timestamp < DATE_ADD(first_order, INTERVAL 6 MONTH)
    GROUP BY 
        f_date.customer_id
)

SELECT 
    100 * (COUNT(DISTINCT f_date.customer_id) / COUNT(DISTINCT sec_date.customer_id)) AS Retention_Rate_of_Customers
FROM 
    f_date 
LEFT JOIN 
    sec_date ON f_date.customer_id = sec_date.customer_id;


-- 15. Identify the top 3 customers who spent the most money in each year
SELECT years, customer_id, payment, ranking
FROM (
    SELECT 
        YEAR(orders.order_purchase_timestamp) AS years, 
        orders.customer_id, 
        ROUND(SUM(payments.payment_value), 2) AS payment,
        DENSE_RANK() OVER (
            PARTITION BY YEAR(orders.order_purchase_timestamp) 
            ORDER BY SUM(payments.payment_value) DESC
        ) AS ranking
    FROM orders
    JOIN payments ON orders.order_id = payments.order_id
    GROUP BY years, orders.customer_id
) AS rank_table
WHERE ranking <= 3;


